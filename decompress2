function decompress(compressedImg, method, k, h)
  #coloca linhas na imagem
  compressedImg = imread(compressedImg);
  [n, colunas, rgb] = size(compressedImg);
  p = n+(n-1)*k;
  img = zeros(p, p, 3);
  img = img - 1; #arruma os 0 pra n ter conflito
  for x = 1: n;
     for y = 1: n;
       img((x-1)*(k+1)+1, (y-1)*(k+1)+1, :) = compressedImg(x,y,:);
     endfor
  endfor
  imwrite (uint8(img), "linhas.png", "Compression", "none");

  #bilinear
  if(method == "bilinear")
    H = [1,0,0,0; 1,0,h,0; 1,h,0,0; 1,h,h,h^2];
    for x = 1: k+1 : p-1;     #passa por todos os pontos
      for y = 1: k+1 : p-1;
        F = zeros(4,1,3);     #inicializa matriz de f
        F(1,:) = img(x,y,:); F(2,:) = img(x,y+k+1,:); F(3,:) = img(x+k+1,y,:); F(4,:) = img(x+k+1,y+k+1,:);
        A = H\F;
        for j = x : x+k+1;    #passa pelos pontos vazios
          for i = y : y+k+1;
            if(img(j,i) == -1);
              img(j,i,1) = A(1) + A(2)*(j-x) + A(3)*(i-y) + A(4)*(j-x)*(i-y);
              img(j,i,2) = A(5) + A(6)*(j-x) + A(7)*(i-y) + A(8)*(j-x)*(i-y);
              img(j,i,3) = A(9) + A(10)*(j-x) + A(11)*(i-y) + A(12)*(j-x)*(i-y);
            endif
          endfor
        endfor
      endfor
    endfor

  #bicubica
  else
    H = [1,0,0,0;1,h,h^2,h^3,;0,1,0,0;0,1,2*h,3*h^2];
    HT = H';                  #matriz transposta de H

    for x = 1: k+1 : p-1;     #passa por todos os pontos
      for y = 1: k+1 : p-1;
        F = zeros(4,4,3);     #inicializa matriz de f

        #precisamos calcular as derivadas abaixo:

        #derivada primeira dy -> dy(x,y) = (f(x,y+1) - f(x,y-1))/2h
        if(y == 1); #caso das bordas
          #dy(x,y)
          dy1 = (img(x,2,:) - img(x,1,:))/h;
          #dy(x,y+1)
          dy2 = (img(x,y+k+1+k+1,:) - img(x,y,:))/2*h;
          #dy(x+1,y)
          dy3 = (img(x+k+1,2,:) - img(x+k+1,1,:))/h;
          #dy(x+1,y+1)
          dy4 = (img(x+k+1,y+k+1+k+1,:) - img(x+k+1,y,:))/2*h;
        elseif(y == p-1);
          dy1 = 777;
          dy2 = 777;
          dy3 = 777;
          dy4 = 777;
        else;
          #dy(x,y)
          dy1 = (img(x,y+k+1,:) - img(x,y-k-1,:))/2*h;
          #dy(x,y+1)
          #dy2 = (img(x,y+k+1+k+1,:) - img(x,y,:))/2*h;
          dy2 = 777;
          #dy(x+1,y)
          dy3 = (img(x+k+1,y+k+1,:) - img(x+k+1,y-k-1,:))/2*h;
          #dy(x+1,y+1)
          #dy4 = (img(x+k+1,y+k+1+k+1,:) - img(x+k+1,y,:))/2*h;
          dy4 = 777;
        endif

        #derivada primeira dx - > dx(x,y) = (f(x+1,y) - f(x-1,y))/2h
        if(x == 1);
          dx1 = 777;
          dx2 = 777;
          dx3 = (img(x+k+1+k+1,y,:) - img(x,y,:))/2*h;
          dx4 = (img(x+k+1+k+1,y+k+1,:) - img(x,y+k+1,:))/2*h;
        elseif(x == p-1);
          dx1 = 777;
          dx2 = 777;
          dx3 = 777;
          dx4 = 777;
        else;
          #dx(x,y)
          dx1 = (img(x+k+1,y,:) - img(x-k-1,y,:))/2*h;
          #dx(x,y+1)
          dx2 = (img(x+k+1,y+k+1,:) - img(x-k-1,y+k+1,:))/2*h;
          #dx(x+1,y)
          #dx3 = (img(x+k+1+k+1,y,:) - img(x,y,:))/2*h;
          dx3 = 777;
          #dx(x+1,y+1)
          #dx4 = (img(x+k+1+k+1,y+k+1,:) - img(x,y+k+1,:))/2*h;
          dx4 = 777;
        endif

        #derivada mista dxdy - > dxdy(x,y) = (dy(x+1,y) - dy(x-1,y))/2h
        if(y == 1);
          #valores aleatorios (teste)
          dxdy1 = 777;
          dxdy2 = 777;
          dxdy3 = 777;
          dxdy4 = 777;
        elseif(y == p-1);
          #valores aleatorios (teste)
          dxdy1 = 777;
          dxdy2 = 777;
          dxdy3 = 777;
          dxdy4 = 777;
        else
          #valores aleatorios (teste)
          dxdy1 = 777;
          dxdy2 = 777;
          dxdy3 = 777;
          dxdy4 = 777;

          #dxdy(x,y)
          #dxdy1 = (dy3 - ((img(x-k-1,y+k+1,:) - img(x-k-1,y-k-1,:))/2*h))/2*h;
          #dxdy(x,y+1)
          #dxdy2 = (dy4 - ((img(x-k-1,y+k+1+k+1,:) - img(x-k-1,y,:))/2*h))/2*h;
          #dxdy(x+1,y)
          #dxdy3 = (((img(x+k+1+k+1,y+k+1,:) - img(x+k+1+k+1,y-k-1,:))/2*h) - ((img(x,y+k+1,:) - img(x,y-k-1,:))/2*h))/2*h;
          #dxdy(x+1,y+1)
          #dxdy4 = (((img(x+k+1+k+1,y+k+1+k+1,:) - img(x+k+1+k+1,y+k+1,:))/2*h) - ((img(x,y+k+1+k+1,:) - img(x,y,:))/2*h))/2*h;
        endif

        #adiciona os f's em F
        F(1,1,:) = img(x,y,:); F(1,2,:) = img(x,y+k+1,:); F(2,1,:) = img(x+k+1,y,:); F(2,2,:) = img(x+k+1,y+k+1,:);
        #adiciona os dy's em F
        F(1,3,:) = dy1; F(1,4,:) = dy2; F(2,3,:) = dy3; F(2,4,:) = dy4;
        #adiciona os dx's em F
        F(3,1,:) = dx1; F(3,2,:) = dx2; F(4,1,:) = dx3; F(4,2,:) = dx4;
        #adiciona os dxdy's em F
        F(3,3,:) = dxdy1; F(3,4,:) = dxdy2; F(4,3,:) = dxdy3; F(4,4,:) = dxdy4;

        #sistema:
        #multiplicação da H com HT
        H = H*HT;
        #resolvendo o sitema
        A = H\F;
        #multiplicando a equação acima por H^−1 pela esquerda e por (HT)^−1
        #não entendi o que é multiplicar pela esquerda e nem sei de qual equação ele ta falando

        #interpolação dos pontos do quadrado
        for j = x : x+k+1;      #passa pelos pontos vazios
          for i = y : y+k+1;
            if(img(j,i) == -1); #interpola pontos sem cor
              #matriz de y na equação do polinomio
              Y = zeros(4,1,3);
              Y(1,:) = 1; Y(2,:) = (i-y); Y(3,:) = (i-y)^2; Y(4,:) = (i-y)^3;
              #matriz de coeficientes para RGB
              A1 = [A(1),A(2),A(3),A(4);A(5),A(6),A(7),A(8);A(9),A(10),A(11),A(12);A(13),A(14),A(15),A(16)];
              A2 = [A(17),A(18),A(19),A(20);A(21),A(22),A(23),A(24);A(25),A(26),A(27),A(28);A(29),A(30),A(31),A(32)];
              A3 = [A(33),A(34),A(35),A(36);A(37),A(38),A(39),A(40);A(41),A(42),A(43),A(44);A(45),A(46),A(47),A(48)];
              #polinomio
              img(j,i,1) = [1,(j-x),(j-x)^2,(j-x)^3]*A1*Y(:,:,1);
              img(j,i,2) = [1,(j-x),(j-x)^2,(j-x)^3]*A2*Y(:,:,2);
              img(j,i,3) = [1,(j-x),(j-x)^2,(j-x)^3]*A3*Y(:,:,3);
            endif
          endfor
        endfor
      endfor
    endfor

  endif

  imwrite (uint8(img), "decompressed.png", "Compression", "none");
endfunction
