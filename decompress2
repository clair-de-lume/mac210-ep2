function decompress(compressedImg, method, k, h)
  #coloca linhas na imagem
  compressedImg = imread(compressedImg);
  [n, colunas, rgb] = size(compressedImg);
  p = n+(n-1)*k;
  img = zeros(p, p, 3);
  img = img - 1; #arruma os 0 pra n ter conflito
  for x = 1: n;
     for y = 1: n;
       img((x-1)*(k+1)+1, (y-1)*(k+1)+1, :) = compressedImg(x,y,:);
     endfor
  endfor

  #bilinear
  if(method == "bilinear")
    H = [1,0,0,0; 1,0,h,0; 1,h,0,0; 1,h,h,h*h];
    for x = 1: k+1 : p-1;
      for y = 1: k+1 : p-1;   #passa por todos os pontos
        F = zeros(4,1,3);     #inicializa matriz de f
        F(1,:) = img(x,y,:); F(2,:) = img(x,y+k+1,:); F(3,:) = img(x+k+1,y,:); F(4,:) = img(x+k+1,y+k+1,:);
        A = H\F;
        for j = x : x+k+1;    #passa pelos pontos vazios
          for i = y : y+k+1;
            if(img(j,i) == -1);
              img(j,i,1) = A(1) + A(2)*(j-x) + A(3)*(i-y) + A(4)*(j-x)*(i-y);
              img(j,i,2) = A(5) + A(6)*(j-x) + A(7)*(i-y) + A(8)*(j-x)*(i-y);
              img(j,i,3) = A(9) + A(10)*(j-x) + A(11)*(i-y) + A(12)*(j-x)*(i-y);
            endif
          endfor
        endfor
      endfor
    endfor

  #bicubico
  else
    disp("t√° na bicubica");
  endif

  imwrite (uint8(img), "decompressed.png", "Compression", "none");
endfunction
