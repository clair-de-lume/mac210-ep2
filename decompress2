function decompress(compressedImg, method, k, h)
  #coloca linhas na imagem
  compressedImg = imread(compressedImg);
  [n, colunas, rgb] = size(compressedImg);
  p = n+(n-1)*k;
  img = zeros(p, p, 3);
  img = img - 1; #arruma os 0 pra n ter conflito
  for x = 1: n;
     for y = 1: n;
       img((x-1)*(k+1)+1, (y-1)*(k+1)+1, :) = compressedImg(x,y,:);
     endfor
  endfor
  imwrite (uint8(img), "linhas.png", "Compression", "none");

  #bilinear
  if(method == "bilinear")
    H = [1,0,0,0; 1,0,h,0; 1,h,0,0; 1,h,h,h^2];
    for x = 1: k+1 : p-1;     #passa por todos os pontos
      for y = 1: k+1 : p-1;
        F = zeros(4,1,3);     #inicializa matriz de f
        F(1,:) = img(x,y,:); F(2,:) = img(x,y+k+1,:); F(3,:) = img(x+k+1,y,:); F(4,:) = img(x+k+1,y+k+1,:);
        A = H\F;
        for j = x : x+k+1;    #passa pelos pontos vazios
          for i = y : y+k+1;
            if(img(j,i) == -1);
              img(j,i,1) = A(1) + A(2)*(j-x) + A(3)*(i-y) + A(4)*(j-x)*(i-y);
              img(j,i,2) = A(5) + A(6)*(j-x) + A(7)*(i-y) + A(8)*(j-x)*(i-y);
              img(j,i,3) = A(9) + A(10)*(j-x) + A(11)*(i-y) + A(12)*(j-x)*(i-y);
            endif
          endfor
        endfor
      endfor
    endfor

  #bicubico
  else
    H = [1,0,0,0;1,h,h^2,h^3,;0,1,0,0;0,1,2*h,3*h^2];
    HT = H';                  #matriz transposta de H

    for x = 1: k+1 : p-1;     #passa por todos os pontos
      for y = 1: k+1 : p-1;
        F = zeros(4,4,3);     #inicializa matriz de f

        #precisamos calcular as derivadas abaixo:

        #dy(x,y)
        #dy(x,y+1)
        #dy(x+1,y)
        #dy(x+1,y+1)

        #dx(x,y)
        #dx(x,y+1)
        #dx(x+1,y)
        #dx(x+1,y+1)

        #dxdy(x,y)
        #dxdy(x,y+1)
        #dxdy(x+1,y)
        #dxdy(x+1,y+1)

        #adiciona os f's em F
        F(1,1,:) = img(x,y,:); F(1,2,:) = img(x,y+k+1,:); F(2,1,:) = img(x+k+1,y,:); F(2,2,:) = img(x+k+1,y+k+1,:);
        #adiciona os dy's em F
        #F(1,3,:) = dy(x,y); F(1,4,:) = dy(x,y+1); F(2,3,:) = dy(x+1,y); F(2,4,:) = dy(x+1,y+1);
        #adiciona os dx's em F
        #F(3,1,:) = dx(x,y); F(3,2,:) = dx(x,y+1); F(4,1,:) = dx(x+1,y); F(4,2,:) = dx(x+1,y+1);
        #adiciona os dxdy's em F
        #F(3,3,:) = dxdy(x,y); F(3,4,:) = dxdy(x,y+1); F(4,3,:) = dxdy(x+1,y); F(4,4,:) = dxdy(x+1,y+1)

        #sistema:

        #multiplicação da H com HT
        H = H*HT;
        #resolvendo o sitema
        A = H\F;
        #multiplicando a equação acima por H^−1 pela esquerda e por (HT)^−1
        #não entendi o que é multiplicar pela esquerda e nem sei de qual equação ele ta falando

        #interpolação dos pontos do quadrado
        for j = x : x+k+1;      #passa pelos pontos vazios
          for i = y : y+k+1;
            if(img(j,i) == -1); #interpola pontos sem cor
              #matriz de y na equação do polinomio
              Y = zeros(4,1,3);
              Y(1,:) = 1; Y(2,:) = (i-y); Y(3,:) = (i-y)^2; Y(4,:) = (i-y)^3;
              #polinomio
              img(j,i,1) = (1*(j-x)*(j-x)^2*(j-x)^3)*A(:,:,1)*Y;
              img(j,i,2) = (1*(j-x)*(j-x)^2*(j-x)^3)*A(:,:,2)*Y;
              img(j,i,3) = (1*(j-x)*(j-x)^2*(j-x)^3)*A(:,:,3)*Y;
            endif
          endfor
        endfor
      endfor
    endfor

  endif

  imwrite (uint8(img), "decompressed.png", "Compression", "none");
endfunction
